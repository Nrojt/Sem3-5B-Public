// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace webapi_specflow_tests.Features {
using TechTalk.SpecFlow;
using System;
using System.Linq;

[System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
public partial class UsersCanRegisterOnTheApplicationFeature
    : object,
      Xunit.IClassFixture<UsersCanRegisterOnTheApplicationFeature.FixtureData>,
      Xunit.IAsyncLifetime {

  private static TechTalk.SpecFlow.ITestRunner testRunner;

  private static string[] featureTags = ((string[])(null));

  private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;

#line 1 "RegisterTest.feature"
#line hidden

  public UsersCanRegisterOnTheApplicationFeature(
      UsersCanRegisterOnTheApplicationFeature.FixtureData fixtureData,
      Xunit.Abstractions.ITestOutputHelper testOutputHelper) {
    this._testOutputHelper = testOutputHelper;
  }

  public static async System.Threading.Tasks.Task FeatureSetupAsync() {
    testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(
        null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker
                  .Instance.GetWorkerId());
    TechTalk.SpecFlow.FeatureInfo featureInfo =
        new TechTalk.SpecFlow.FeatureInfo(
            new System.Globalization.CultureInfo("en-US"), "Features",
            "Users can register on the application",
            "\tSo that they can use the application",
            ProgrammingLanguage.CSharp, featureTags);
    await testRunner.OnFeatureStartAsync(featureInfo);
  }

  public static async System.Threading.Tasks.Task FeatureTearDownAsync() {
    string testWorkerId = testRunner.TestWorkerId;
    await testRunner.OnFeatureEndAsync();
    testRunner = null;
    TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance
        .ReleaseWorker(testWorkerId);
  }

  public async System.Threading.Tasks.Task TestInitializeAsync() {}

  public async System.Threading.Tasks.Task TestTearDownAsync() {
    await testRunner.OnScenarioEndAsync();
  }

  public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo) {
    testRunner.OnScenarioInitialize(scenarioInfo);
    testRunner.ScenarioContext.ScenarioContainer
        .RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(
            _testOutputHelper);
  }

  public async System.Threading.Tasks.Task ScenarioStartAsync() {
    await testRunner.OnScenarioStartAsync();
  }

  public async System.Threading.Tasks.Task ScenarioCleanupAsync() {
    await testRunner.CollectScenarioErrorsAsync();
  }

  async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync() {
    await this.TestInitializeAsync();
  }

  async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync() {
    await this.TestTearDownAsync();
  }

  [Xunit.SkippableFactAttribute(
      DisplayName = "User of type DisabilityExpert can register")]
  [Xunit.TraitAttribute("FeatureTitle",
                        "Users can register on the application")]
  [Xunit.TraitAttribute("Description",
                        "User of type DisabilityExpert can register")]
  public async System.Threading.Tasks.Task
  UserOfTypeDisabilityExpertCanRegister() {
    string[] tagsOfScenario = ((string[])(null));
    System.Collections.Specialized.OrderedDictionary argumentsOfScenario =
        new System.Collections.Specialized.OrderedDictionary();
    TechTalk.SpecFlow.ScenarioInfo scenarioInfo =
        new TechTalk.SpecFlow.ScenarioInfo(
            "User of type DisabilityExpert can register", null, tagsOfScenario,
            argumentsOfScenario, featureTags);
#line 4
    this.ScenarioInitialize(scenarioInfo);
#line hidden
    if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) ||
         TagHelper.ContainsIgnoreTag(featureTags))) {
      testRunner.SkipScenario();
    } else {
      await this.ScenarioStartAsync();
#line 5
      await testRunner.GivenAsync("the user sends a request to register",
                                  ((string)(null)),
                                  ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
      await testRunner.WhenAsync(
          "the user is of type DisabilityExpertWithoutGuardian",
          ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
      await testRunner.WhenAsync("all the required fields are filled",
                                 ((string)(null)),
                                 ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
      await testRunner.ThenAsync("the user is registered", ((string)(null)),
                                 ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
    }
    await this.ScenarioCleanupAsync();
  }

  [Xunit.SkippableFactAttribute(DisplayName =
                                    "User of type Company can register")]
  [Xunit.TraitAttribute("FeatureTitle",
                        "Users can register on the application")]
  [Xunit.TraitAttribute("Description", "User of type Company can register")]
  public async System.Threading.Tasks.Task UserOfTypeCompanyCanRegister() {
    string[] tagsOfScenario = ((string[])(null));
    System.Collections.Specialized.OrderedDictionary argumentsOfScenario =
        new System.Collections.Specialized.OrderedDictionary();
    TechTalk.SpecFlow.ScenarioInfo scenarioInfo =
        new TechTalk.SpecFlow.ScenarioInfo("User of type Company can register",
                                           null, tagsOfScenario,
                                           argumentsOfScenario, featureTags);
#line 10
    this.ScenarioInitialize(scenarioInfo);
#line hidden
    if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) ||
         TagHelper.ContainsIgnoreTag(featureTags))) {
      testRunner.SkipScenario();
    } else {
      await this.ScenarioStartAsync();
#line 11
      await testRunner.GivenAsync("the user sends a request to register",
                                  ((string)(null)),
                                  ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
      await testRunner.WhenAsync("the user is of type CompanyApproved",
                                 ((string)(null)),
                                 ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
      await testRunner.WhenAsync("all the required fields are filled",
                                 ((string)(null)),
                                 ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
      await testRunner.ThenAsync("the user is registered", ((string)(null)),
                                 ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
    }
    await this.ScenarioCleanupAsync();
  }

  [Xunit.SkippableFactAttribute(DisplayName =
                                    "User of type Guardian can register")]
  [Xunit.TraitAttribute("FeatureTitle",
                        "Users can register on the application")]
  [Xunit.TraitAttribute("Description", "User of type Guardian can register")]
  public async System.Threading.Tasks.Task UserOfTypeGuardianCanRegister() {
    string[] tagsOfScenario = ((string[])(null));
    System.Collections.Specialized.OrderedDictionary argumentsOfScenario =
        new System.Collections.Specialized.OrderedDictionary();
    TechTalk.SpecFlow.ScenarioInfo scenarioInfo =
        new TechTalk.SpecFlow.ScenarioInfo("User of type Guardian can register",
                                           null, tagsOfScenario,
                                           argumentsOfScenario, featureTags);
#line 16
    this.ScenarioInitialize(scenarioInfo);
#line hidden
    if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) ||
         TagHelper.ContainsIgnoreTag(featureTags))) {
      testRunner.SkipScenario();
    } else {
      await this.ScenarioStartAsync();
#line 17
      await testRunner.GivenAsync("the user sends a request to register",
                                  ((string)(null)),
                                  ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
      await testRunner.WhenAsync("the user is of type Guardian",
                                 ((string)(null)),
                                 ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
      await testRunner.WhenAsync("all the required fields are filled",
                                 ((string)(null)),
                                 ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
      await testRunner.ThenAsync("the user is registered", ((string)(null)),
                                 ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
    }
    await this.ScenarioCleanupAsync();
  }

  [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow",
                                                  "4.0.0.0")]
  [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  public class FixtureData : object, Xunit.IAsyncLifetime {

    async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync() {
      await UsersCanRegisterOnTheApplicationFeature.FeatureSetupAsync();
    }

    async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync() {
      await UsersCanRegisterOnTheApplicationFeature.FeatureTearDownAsync();
    }
  }
}
}
#pragma warning restore
#endregion
